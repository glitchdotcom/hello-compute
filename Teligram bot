flask
from flask import Flask
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

if __name__ == '__main__':
    app.run()python3 main.{
  "start": "bash start.sh"
}from flask import Flask
from telegram import Bot
import threading

app = Flask(__name__)

bot = Bot(token='YOUR_BOT_TOKEN')

@app.route('/')
def index():
    return "Bot is Alive!"

def run_bot():
    bot.send_message(chat_id=YOUR_ID, text="ü§ñ Bot restarted!")

if __name__ == '__main__':
    threading.Thread(target=run_bot).start()
    app.run()if query.data == "balance":
        await query.edit_message_text(f"üí∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {user_data['balance']}/100")

    elif query.data == "withdraw":
        if user_data["balance"] >= 100:
            await query.edit_message_text("‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶ó‡¶¶ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶® ‡¶Æ‡¶ó‡¶ú ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá‡•§")
        else:
            await query.edit_message_text(f"‚ùå ‡¶Æ‡¶ø‡¶®‡¶ø‡¶Æ‡¶æ‡¶Æ ‡ßß‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ {user_data['balance']}")

    elif query.data == "nagad":
        await query.edit_message_text("üì± ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ó‡¶¶ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")

        context.user_data["awaiting_nagad"] = True

async def nagad_collector(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_nagad"):
        number = update.message.text
        user_id = str(update.effective_user.id)
        data = load_data()
        data[user_id]["nagad"] = number
        save_data(data)
        context.user_data["awaiting_nagad"] = False
        await update.message.reply_text(f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ó‡¶¶ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: {number} ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")

async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        return
    msg = update.message.text.replace("/broadcast ", "")
    data = load_data()
    for uid in data:
        try:
            await context.bot.send_message(chat_id=uid, text=msg)
        except:
            continue
    await update.message.reply_text("‚úÖ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶∂‡ßá‡¶∑‡•§")

app = Application.builder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(CommandHandler("broadcast", admin_broadcast))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, nagad_collecto
